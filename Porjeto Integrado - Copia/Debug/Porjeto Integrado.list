
Porjeto Integrado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be0  08002be0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002be0  08002be0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be0  08002be0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000018  08002c00  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002c00  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006190  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001337  00000000  00000000  000261d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  00027508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  00027bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015252  00000000  00000000  000281e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000058dd  00000000  00000000  0003d432  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e473  00000000  00000000  00042d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1182  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a20  00000000  00000000  000c1200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ae8 	.word	0x08002ae8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002ae8 	.word	0x08002ae8

0800014c <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000156:	2200      	movs	r2, #0
 8000158:	2110      	movs	r1, #16
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <ST7789_WriteCommand+0x40>)
 800015c:	f001 fe2f 	bl	8001dbe <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000160:	2200      	movs	r2, #0
 8000162:	2101      	movs	r1, #1
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <ST7789_WriteCommand+0x44>)
 8000166:	f001 fe2a 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	; (8000194 <ST7789_WriteCommand+0x48>)
 8000174:	f002 faaa 	bl	80026cc <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <ST7789_WriteCommand+0x40>)
 800017e:	f001 fe1e 	bl	8001dbe <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	40010c00 	.word	0x40010c00
 8000194:	20000044 	.word	0x20000044

08000198 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2110      	movs	r1, #16
 80001a6:	4815      	ldr	r0, [pc, #84]	; (80001fc <ST7789_WriteData+0x64>)
 80001a8:	f001 fe09 	bl	8001dbe <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <ST7789_WriteData+0x68>)
 80001b2:	f001 fe04 	bl	8001dbe <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80001b6:	e015      	b.n	80001e4 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	4293      	cmp	r3, r2
 80001c0:	bf28      	it	cs
 80001c2:	4613      	movcs	r3, r2
 80001c4:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80001c6:	89fa      	ldrh	r2, [r7, #14]
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <ST7789_WriteData+0x6c>)
 80001d0:	f002 fa7c 	bl	80026cc <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80001d4:	89fb      	ldrh	r3, [r7, #14]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1e6      	bne.n	80001b8 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <ST7789_WriteData+0x64>)
 80001f0:	f001 fde5 	bl	8001dbe <HAL_GPIO_WritePin>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00
 8000204:	20000044 	.word	0x20000044

08000208 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480c      	ldr	r0, [pc, #48]	; (8000248 <ST7789_WriteSmallData+0x40>)
 8000218:	f001 fdd1 	bl	8001dbe <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <ST7789_WriteSmallData+0x44>)
 8000222:	f001 fdcc 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2201      	movs	r2, #1
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <ST7789_WriteSmallData+0x48>)
 8000230:	f002 fa4c 	bl	80026cc <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000234:	2201      	movs	r2, #1
 8000236:	2110      	movs	r1, #16
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ST7789_WriteSmallData+0x40>)
 800023a:	f001 fdc0 	bl	8001dbe <HAL_GPIO_WritePin>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	20000044 	.word	0x20000044

08000254 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800025e:	2036      	movs	r0, #54	; 0x36
 8000260:	f7ff ff74 	bl	800014c <ST7789_WriteCommand>
	switch (m) {
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d81a      	bhi.n	80002a0 <ST7789_SetRotation+0x4c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <ST7789_SetRotation+0x1c>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000281 	.word	0x08000281
 8000274:	08000289 	.word	0x08000289
 8000278:	08000291 	.word	0x08000291
 800027c:	08000299 	.word	0x08000299
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000280:	20c0      	movs	r0, #192	; 0xc0
 8000282:	f7ff ffc1 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000286:	e00c      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000288:	20a0      	movs	r0, #160	; 0xa0
 800028a:	f7ff ffbd 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800028e:	e008      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000290:	2000      	movs	r0, #0
 8000292:	f7ff ffb9 	bl	8000208 <ST7789_WriteSmallData>
		break;
 8000296:	e004      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000298:	2060      	movs	r0, #96	; 0x60
 800029a:	f7ff ffb5 	bl	8000208 <ST7789_WriteSmallData>
		break;
 800029e:	e000      	b.n	80002a2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80002a0:	bf00      	nop
	}
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4623      	mov	r3, r4
 80002bc:	80fb      	strh	r3, [r7, #6]
 80002be:	4603      	mov	r3, r0
 80002c0:	80bb      	strh	r3, [r7, #4]
 80002c2:	460b      	mov	r3, r1
 80002c4:	807b      	strh	r3, [r7, #2]
 80002c6:	4613      	mov	r3, r2
 80002c8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80002ca:	2200      	movs	r2, #0
 80002cc:	2110      	movs	r1, #16
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 80002d0:	f001 fd75 	bl	8001dbe <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	82fb      	strh	r3, [r7, #22]
 80002d8:	887b      	ldrh	r3, [r7, #2]
 80002da:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80002dc:	88bb      	ldrh	r3, [r7, #4]
 80002de:	827b      	strh	r3, [r7, #18]
 80002e0:	883b      	ldrh	r3, [r7, #0]
 80002e2:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80002e4:	202a      	movs	r0, #42	; 0x2a
 80002e6:	f7ff ff31 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	0a1b      	lsrs	r3, r3, #8
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	733b      	strb	r3, [r7, #12]
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	737b      	strb	r3, [r7, #13]
 80002fa:	8abb      	ldrh	r3, [r7, #20]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	73bb      	strb	r3, [r7, #14]
 8000304:	8abb      	ldrh	r3, [r7, #20]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2104      	movs	r1, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff41 	bl	8000198 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000316:	202b      	movs	r0, #43	; 0x2b
 8000318:	f7ff ff18 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	723b      	strb	r3, [r7, #8]
 8000326:	8a7b      	ldrh	r3, [r7, #18]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	727b      	strb	r3, [r7, #9]
 800032c:	8a3b      	ldrh	r3, [r7, #16]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b2db      	uxtb	r3, r3
 8000334:	72bb      	strb	r3, [r7, #10]
 8000336:	8a3b      	ldrh	r3, [r7, #16]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff28 	bl	8000198 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000348:	202c      	movs	r0, #44	; 0x2c
 800034a:	f7ff feff 	bl	800014c <ST7789_WriteCommand>
	ST7789_UnSelect();
 800034e:	2201      	movs	r2, #1
 8000350:	2110      	movs	r1, #16
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <ST7789_SetAddressWindow+0xb4>)
 8000354:	f001 fd33 	bl	8001dbe <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b08b      	sub	sp, #44	; 0x2c
 8000368:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800036a:	2019      	movs	r0, #25
 800036c:	f001 fab0 	bl	80018d0 <HAL_Delay>
    ST7789_RST_Clr();
 8000370:	2200      	movs	r2, #0
 8000372:	2102      	movs	r1, #2
 8000374:	4846      	ldr	r0, [pc, #280]	; (8000490 <ST7789_Init+0x12c>)
 8000376:	f001 fd22 	bl	8001dbe <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800037a:	2019      	movs	r0, #25
 800037c:	f001 faa8 	bl	80018d0 <HAL_Delay>
    ST7789_RST_Set();
 8000380:	2201      	movs	r2, #1
 8000382:	2102      	movs	r1, #2
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <ST7789_Init+0x12c>)
 8000386:	f001 fd1a 	bl	8001dbe <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f001 faa0 	bl	80018d0 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000390:	203a      	movs	r0, #58	; 0x3a
 8000392:	f7ff fedb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000396:	2055      	movs	r0, #85	; 0x55
 8000398:	f7ff ff36 	bl	8000208 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800039c:	20b2      	movs	r0, #178	; 0xb2
 800039e:	f7ff fed5 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80003a2:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <ST7789_Init+0x130>)
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff feed 	bl	8000198 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80003be:	2002      	movs	r0, #2
 80003c0:	f7ff ff48 	bl	8000254 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80003c4:	20b7      	movs	r0, #183	; 0xb7
 80003c6:	f7ff fec1 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80003ca:	2035      	movs	r0, #53	; 0x35
 80003cc:	f7ff ff1c 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80003d0:	20bb      	movs	r0, #187	; 0xbb
 80003d2:	f7ff febb 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80003d6:	2019      	movs	r0, #25
 80003d8:	f7ff ff16 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80003dc:	20c0      	movs	r0, #192	; 0xc0
 80003de:	f7ff feb5 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80003e2:	202c      	movs	r0, #44	; 0x2c
 80003e4:	f7ff ff10 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80003e8:	20c2      	movs	r0, #194	; 0xc2
 80003ea:	f7ff feaf 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff0a 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80003f4:	20c3      	movs	r0, #195	; 0xc3
 80003f6:	f7ff fea9 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80003fa:	2012      	movs	r0, #18
 80003fc:	f7ff ff04 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000400:	20c4      	movs	r0, #196	; 0xc4
 8000402:	f7ff fea3 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000406:	2020      	movs	r0, #32
 8000408:	f7ff fefe 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800040c:	20c6      	movs	r0, #198	; 0xc6
 800040e:	f7ff fe9d 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff fef8 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000418:	20d0      	movs	r0, #208	; 0xd0
 800041a:	f7ff fe97 	bl	800014c <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800041e:	20a4      	movs	r0, #164	; 0xa4
 8000420:	f7ff fef2 	bl	8000208 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000424:	20a1      	movs	r0, #161	; 0xa1
 8000426:	f7ff feef 	bl	8000208 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800042a:	20e0      	movs	r0, #224	; 0xe0
 800042c:	f7ff fe8e 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000430:	4b19      	ldr	r3, [pc, #100]	; (8000498 <ST7789_Init+0x134>)
 8000432:	f107 0410 	add.w	r4, r7, #16
 8000436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000438:	c407      	stmia	r4!, {r0, r1, r2}
 800043a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	210e      	movs	r1, #14
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000448:	20e1      	movs	r0, #225	; 0xe1
 800044a:	f7ff fe7f 	bl	800014c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <ST7789_Init+0x138>)
 8000450:	463c      	mov	r4, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	c407      	stmia	r4!, {r0, r1, r2}
 8000456:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000458:	463b      	mov	r3, r7
 800045a:	210e      	movs	r1, #14
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe9b 	bl	8000198 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff fe72 	bl	800014c <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff fe6f 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800046e:	2013      	movs	r0, #19
 8000470:	f7ff fe6c 	bl	800014c <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000474:	2029      	movs	r0, #41	; 0x29
 8000476:	f7ff fe69 	bl	800014c <ST7789_WriteCommand>

	HAL_Delay(50);
 800047a:	2032      	movs	r0, #50	; 0x32
 800047c:	f001 fa28 	bl	80018d0 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000480:	2000      	movs	r0, #0
 8000482:	f000 f80d 	bl	80004a0 <ST7789_Fill_Color>
}
 8000486:	bf00      	nop
 8000488:	372c      	adds	r7, #44	; 0x2c
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	bf00      	nop
 8000490:	40010c00 	.word	0x40010c00
 8000494:	08002b00 	.word	0x08002b00
 8000498:	08002b08 	.word	0x08002b08
 800049c:	08002b18 	.word	0x08002b18

080004a0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80004aa:	23ef      	movs	r3, #239	; 0xef
 80004ac:	22ef      	movs	r2, #239	; 0xef
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fefb 	bl	80002ac <ST7789_SetAddressWindow>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	81fb      	strh	r3, [r7, #14]
 80004ba:	e019      	b.n	80004f0 <ST7789_Fill_Color+0x50>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004bc:	2300      	movs	r3, #0
 80004be:	81bb      	strh	r3, [r7, #12]
 80004c0:	e010      	b.n	80004e4 <ST7789_Fill_Color+0x44>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	0a1b      	lsrs	r3, r3, #8
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	723b      	strb	r3, [r7, #8]
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2102      	movs	r1, #2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe5d 	bl	8000198 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	2bef      	cmp	r3, #239	; 0xef
 80004e8:	d9eb      	bls.n	80004c2 <ST7789_Fill_Color+0x22>
		for (i = 0; i < ST7789_WIDTH; i++)
 80004ea:	89fb      	ldrh	r3, [r7, #14]
 80004ec:	3301      	adds	r3, #1
 80004ee:	81fb      	strh	r3, [r7, #14]
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	2bef      	cmp	r3, #239	; 0xef
 80004f4:	d9e2      	bls.n	80004bc <ST7789_Fill_Color+0x1c>
				}
	#endif
	//ALGG ST7789_UnSelect();
}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
 800050a:	460b      	mov	r3, r1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	4613      	mov	r3, r2
 8000510:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2bef      	cmp	r3, #239	; 0xef
 8000516:	d821      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8000518:	88bb      	ldrh	r3, [r7, #4]
 800051a:	2bef      	cmp	r3, #239	; 0xef
 800051c:	d81e      	bhi.n	800055c <ST7789_DrawPixel+0x5c>
	
	ST7789_SetAddressWindow(x, y, x, y);
 800051e:	88bb      	ldrh	r3, [r7, #4]
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	88b9      	ldrh	r1, [r7, #4]
 8000524:	88f8      	ldrh	r0, [r7, #6]
 8000526:	f7ff fec1 	bl	80002ac <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b29b      	uxth	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	733b      	strb	r3, [r7, #12]
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000540:	f001 fc3d 	bl	8001dbe <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe24 	bl	8000198 <ST7789_WriteData>
	ST7789_UnSelect();
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <ST7789_DrawPixel+0x64>)
 8000556:	f001 fc32 	bl	8001dbe <HAL_GPIO_WritePin>
 800055a:	e000      	b.n	800055e <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 800055c:	bf00      	nop
}
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800

08000568 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	4604      	mov	r4, r0
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4623      	mov	r3, r4
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4603      	mov	r3, r0
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
 8000582:	4613      	mov	r3, r2
 8000584:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000586:	883a      	ldrh	r2, [r7, #0]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000590:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000594:	8879      	ldrh	r1, [r7, #2]
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	1acb      	subs	r3, r1, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	bfb8      	it	lt
 800059e:	425b      	neglt	r3, r3
 80005a0:	429a      	cmp	r2, r3
 80005a2:	bfcc      	ite	gt
 80005a4:	2301      	movgt	r3, #1
 80005a6:	2300      	movle	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	827b      	strh	r3, [r7, #18]
    if (steep) {
 80005ac:	8a7b      	ldrh	r3, [r7, #18]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00b      	beq.n	80005ca <ST7789_DrawLine+0x62>
		swap = x0;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 80005ba:	8a3b      	ldrh	r3, [r7, #16]
 80005bc:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 80005c2:	883b      	ldrh	r3, [r7, #0]
 80005c4:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 80005c6:	8a3b      	ldrh	r3, [r7, #16]
 80005c8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d90b      	bls.n	80005ea <ST7789_DrawLine+0x82>
		swap = x0;
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 80005da:	8a3b      	ldrh	r3, [r7, #16]
 80005dc:	807b      	strh	r3, [r7, #2]

		swap = y0;
 80005de:	88bb      	ldrh	r3, [r7, #4]
 80005e0:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 80005e6:	8a3b      	ldrh	r3, [r7, #16]
 80005e8:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80005ea:	887a      	ldrh	r2, [r7, #2]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 80005f4:	883a      	ldrh	r2, [r7, #0]
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bfb8      	it	lt
 80005fe:	425b      	neglt	r3, r3
 8000600:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8000602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000606:	0fda      	lsrs	r2, r3, #31
 8000608:	4413      	add	r3, r2
 800060a:	105b      	asrs	r3, r3, #1
 800060c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	883b      	ldrh	r3, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d202      	bcs.n	800061c <ST7789_DrawLine+0xb4>
        ystep = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	82bb      	strh	r3, [r7, #20]
 800061a:	e028      	b.n	800066e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 8000622:	e024      	b.n	800066e <ST7789_DrawLine+0x106>
        if (steep) {
 8000624:	8a7b      	ldrh	r3, [r7, #18]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 800062a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800062c:	88f9      	ldrh	r1, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff65 	bl	8000500 <ST7789_DrawPixel>
 8000636:	e005      	b.n	8000644 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 8000638:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800063a:	88b9      	ldrh	r1, [r7, #4]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff5e 	bl	8000500 <ST7789_DrawPixel>
        }
        err -= dy;
 8000644:	8afa      	ldrh	r2, [r7, #22]
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 800064e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000652:	2b00      	cmp	r3, #0
 8000654:	da08      	bge.n	8000668 <ST7789_DrawLine+0x100>
            y0 += ystep;
 8000656:	8aba      	ldrh	r2, [r7, #20]
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800065e:	8afa      	ldrh	r2, [r7, #22]
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4413      	add	r3, r2
 8000664:	b29b      	uxth	r3, r3
 8000666:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	3301      	adds	r3, #1
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	429a      	cmp	r2, r3
 8000674:	d9d6      	bls.n	8000624 <ST7789_DrawLine+0xbc>
        }
    }
}
 8000676:	bf00      	nop
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}
	...

08000680 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b087      	sub	sp, #28
 8000684:	af02      	add	r7, sp, #8
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4623      	mov	r3, r4
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
 800069a:	4613      	mov	r3, r2
 800069c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	4822      	ldr	r0, [pc, #136]	; (800072c <ST7789_DrawFilledRectangle+0xac>)
 80006a4:	f001 fb8b 	bl	8001dbe <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	2bef      	cmp	r3, #239	; 0xef
 80006ac:	d83a      	bhi.n	8000724 <ST7789_DrawFilledRectangle+0xa4>
 80006ae:	88bb      	ldrh	r3, [r7, #4]
 80006b0:	2bef      	cmp	r3, #239	; 0xef
 80006b2:	d837      	bhi.n	8000724 <ST7789_DrawFilledRectangle+0xa4>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 80006b4:	88fa      	ldrh	r2, [r7, #6]
 80006b6:	887b      	ldrh	r3, [r7, #2]
 80006b8:	4413      	add	r3, r2
 80006ba:	2bef      	cmp	r3, #239	; 0xef
 80006bc:	dd03      	ble.n	80006c6 <ST7789_DrawFilledRectangle+0x46>
		w = ST7789_WIDTH - x;
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80006c4:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	883b      	ldrh	r3, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	2bef      	cmp	r3, #239	; 0xef
 80006ce:	dd03      	ble.n	80006d8 <ST7789_DrawFilledRectangle+0x58>
		h = ST7789_HEIGHT - y;
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80006d6:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e017      	b.n	800070e <ST7789_DrawFilledRectangle+0x8e>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	88bb      	ldrh	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	b299      	uxth	r1, r3
 80006e8:	88fa      	ldrh	r2, [r7, #6]
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	4413      	add	r3, r2
 80006ee:	b29c      	uxth	r4, r3
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	88f8      	ldrh	r0, [r7, #6]
 80006fc:	8c3b      	ldrh	r3, [r7, #32]
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	4613      	mov	r3, r2
 8000702:	4622      	mov	r2, r4
 8000704:	f7ff ff30 	bl	8000568 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3301      	adds	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	b29b      	uxth	r3, r3
 8000712:	883a      	ldrh	r2, [r7, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d2e2      	bcs.n	80006de <ST7789_DrawFilledRectangle+0x5e>
	}
	ST7789_UnSelect();
 8000718:	2201      	movs	r2, #1
 800071a:	2110      	movs	r1, #16
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <ST7789_DrawFilledRectangle+0xac>)
 800071e:	f001 fb4e 	bl	8001dbe <HAL_GPIO_WritePin>
 8000722:	e000      	b.n	8000726 <ST7789_DrawFilledRectangle+0xa6>
		return;
 8000724:	bf00      	nop
}
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	40010800 	.word	0x40010800

08000730 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af02      	add	r7, sp, #8
 8000736:	4604      	mov	r4, r0
 8000738:	4608      	mov	r0, r1
 800073a:	4611      	mov	r1, r2
 800073c:	461a      	mov	r2, r3
 800073e:	4623      	mov	r3, r4
 8000740:	80fb      	strh	r3, [r7, #6]
 8000742:	4603      	mov	r3, r0
 8000744:	80bb      	strh	r3, [r7, #4]
 8000746:	460b      	mov	r3, r1
 8000748:	807b      	strh	r3, [r7, #2]
 800074a:	4613      	mov	r3, r2
 800074c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800074e:	2200      	movs	r2, #0
 8000750:	2110      	movs	r1, #16
 8000752:	4869      	ldr	r0, [pc, #420]	; (80008f8 <ST7789_DrawFilledCircle+0x1c8>)
 8000754:	f001 fb33 	bl	8001dbe <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 8000758:	887b      	ldrh	r3, [r7, #2]
 800075a:	f1c3 0301 	rsb	r3, r3, #1
 800075e:	b29b      	uxth	r3, r3
 8000760:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	461a      	mov	r2, r3
 800076a:	03d2      	lsls	r2, r2, #15
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000778:	887b      	ldrh	r3, [r7, #2]
 800077a:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 800077c:	88f8      	ldrh	r0, [r7, #6]
 800077e:	88ba      	ldrh	r2, [r7, #4]
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	883a      	ldrh	r2, [r7, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f7ff feb9 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 800078e:	88f8      	ldrh	r0, [r7, #6]
 8000790:	88ba      	ldrh	r2, [r7, #4]
 8000792:	887b      	ldrh	r3, [r7, #2]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	b29b      	uxth	r3, r3
 8000798:	883a      	ldrh	r2, [r7, #0]
 800079a:	4619      	mov	r1, r3
 800079c:	f7ff feb0 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 80007a0:	88fa      	ldrh	r2, [r7, #6]
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	4413      	add	r3, r2
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	88b9      	ldrh	r1, [r7, #4]
 80007aa:	883a      	ldrh	r2, [r7, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fea7 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 80007b2:	88fa      	ldrh	r2, [r7, #6]
 80007b4:	887b      	ldrh	r3, [r7, #2]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	88b9      	ldrh	r1, [r7, #4]
 80007bc:	883a      	ldrh	r2, [r7, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fe9e 	bl	8000500 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 80007c4:	88fa      	ldrh	r2, [r7, #6]
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	b298      	uxth	r0, r3
 80007cc:	88b9      	ldrh	r1, [r7, #4]
 80007ce:	88fa      	ldrh	r2, [r7, #6]
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	4413      	add	r3, r2
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	88bc      	ldrh	r4, [r7, #4]
 80007d8:	883b      	ldrh	r3, [r7, #0]
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	4623      	mov	r3, r4
 80007de:	f7ff fec3 	bl	8000568 <ST7789_DrawLine>

	while (x < y) {
 80007e2:	e079      	b.n	80008d8 <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 80007e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0e      	blt.n	800080a <ST7789_DrawFilledCircle+0xda>
			y--;
 80007ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	3b01      	subs	r3, #1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80007f8:	8a7b      	ldrh	r3, [r7, #18]
 80007fa:	3302      	adds	r3, #2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000800:	8afa      	ldrh	r2, [r7, #22]
 8000802:	8a7b      	ldrh	r3, [r7, #18]
 8000804:	4413      	add	r3, r2
 8000806:	b29b      	uxth	r3, r3
 8000808:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800080a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800080e:	b29b      	uxth	r3, r3
 8000810:	3301      	adds	r3, #1
 8000812:	b29b      	uxth	r3, r3
 8000814:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000816:	8abb      	ldrh	r3, [r7, #20]
 8000818:	3302      	adds	r3, #2
 800081a:	b29b      	uxth	r3, r3
 800081c:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800081e:	8afa      	ldrh	r2, [r7, #22]
 8000820:	8abb      	ldrh	r3, [r7, #20]
 8000822:	4413      	add	r3, r2
 8000824:	b29b      	uxth	r3, r3
 8000826:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	8a3b      	ldrh	r3, [r7, #16]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b298      	uxth	r0, r3
 8000830:	88ba      	ldrh	r2, [r7, #4]
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	4413      	add	r3, r2
 8000836:	b299      	uxth	r1, r3
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	8a3b      	ldrh	r3, [r7, #16]
 800083c:	4413      	add	r3, r2
 800083e:	b29c      	uxth	r4, r3
 8000840:	88ba      	ldrh	r2, [r7, #4]
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	4413      	add	r3, r2
 8000846:	b29a      	uxth	r2, r3
 8000848:	883b      	ldrh	r3, [r7, #0]
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4613      	mov	r3, r2
 800084e:	4622      	mov	r2, r4
 8000850:	f7ff fe8a 	bl	8000568 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 8000854:	88fa      	ldrh	r2, [r7, #6]
 8000856:	8a3b      	ldrh	r3, [r7, #16]
 8000858:	4413      	add	r3, r2
 800085a:	b298      	uxth	r0, r3
 800085c:	88ba      	ldrh	r2, [r7, #4]
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	b299      	uxth	r1, r3
 8000864:	88fa      	ldrh	r2, [r7, #6]
 8000866:	8a3b      	ldrh	r3, [r7, #16]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	b29c      	uxth	r4, r3
 800086c:	88ba      	ldrh	r2, [r7, #4]
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	883b      	ldrh	r3, [r7, #0]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4613      	mov	r3, r2
 800087a:	4622      	mov	r2, r4
 800087c:	f7ff fe74 	bl	8000568 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8000880:	88fa      	ldrh	r2, [r7, #6]
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	4413      	add	r3, r2
 8000886:	b298      	uxth	r0, r3
 8000888:	88ba      	ldrh	r2, [r7, #4]
 800088a:	8a3b      	ldrh	r3, [r7, #16]
 800088c:	4413      	add	r3, r2
 800088e:	b299      	uxth	r1, r3
 8000890:	88fa      	ldrh	r2, [r7, #6]
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	b29c      	uxth	r4, r3
 8000898:	88ba      	ldrh	r2, [r7, #4]
 800089a:	8a3b      	ldrh	r3, [r7, #16]
 800089c:	4413      	add	r3, r2
 800089e:	b29a      	uxth	r2, r3
 80008a0:	883b      	ldrh	r3, [r7, #0]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	4613      	mov	r3, r2
 80008a6:	4622      	mov	r2, r4
 80008a8:	f7ff fe5e 	bl	8000568 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 80008ac:	88fa      	ldrh	r2, [r7, #6]
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	4413      	add	r3, r2
 80008b2:	b298      	uxth	r0, r3
 80008b4:	88ba      	ldrh	r2, [r7, #4]
 80008b6:	8a3b      	ldrh	r3, [r7, #16]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b299      	uxth	r1, r3
 80008bc:	88fa      	ldrh	r2, [r7, #6]
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b29c      	uxth	r4, r3
 80008c4:	88ba      	ldrh	r2, [r7, #4]
 80008c6:	8a3b      	ldrh	r3, [r7, #16]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	883b      	ldrh	r3, [r7, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	4613      	mov	r3, r2
 80008d2:	4622      	mov	r2, r4
 80008d4:	f7ff fe48 	bl	8000568 <ST7789_DrawLine>
	while (x < y) {
 80008d8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80008dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	f6ff af7f 	blt.w	80007e4 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 80008e6:	2201      	movs	r2, #1
 80008e8:	2110      	movs	r1, #16
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <ST7789_DrawFilledCircle+0x1c8>)
 80008ec:	f001 fa67 	bl	8001dbe <HAL_GPIO_WritePin>
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	40010800 	.word	0x40010800

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 ff84 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f809 	bl	800091a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f000 f878 	bl	80009fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800090c:	f000 f840 	bl	8000990 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8000910:	f7ff fd28 	bl	8000364 <ST7789_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Menu();
	  Jogo();
 8000914:	f000 f8d2 	bl	8000abc <Jogo>
  {
 8000918:	e7fc      	b.n	8000914 <main+0x18>

0800091a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b090      	sub	sp, #64	; 0x40
 800091e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000920:	f107 0318 	add.w	r3, r7, #24
 8000924:	2228      	movs	r2, #40	; 0x28
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 f8d5 	bl	8002ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000948:	2300      	movs	r3, #0
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4618      	mov	r0, r3
 8000952:	f001 fa4d 	bl	8001df0 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800095c:	f000 fe82 	bl	8001664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8000960:	230f      	movs	r3, #15
 8000962:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fcb9 	bl	80022f0 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000984:	f000 fe6e 	bl	8001664 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3740      	adds	r7, #64	; 0x40
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_SPI1_Init+0x64>)
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <MX_SPI1_Init+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_SPI1_Init+0x64>)
 800099c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009c4:	2208      	movs	r2, #8
 80009c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009dc:	220a      	movs	r2, #10
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_SPI1_Init+0x64>)
 80009e2:	f001 fdef 	bl	80025c4 <HAL_SPI_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009ec:	f000 fe3a 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000044 	.word	0x20000044
 80009f8:	40013000 	.word	0x40013000

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0xb4>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0xb4>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0xb4>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_GPIO_Init+0xb4>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <MX_GPIO_Init+0xb4>)
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xb4>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2110      	movs	r1, #16
 8000a44:	481b      	ldr	r0, [pc, #108]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a46:	f001 f9ba 	bl	8001dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	217b      	movs	r1, #123	; 0x7b
 8000a4e:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <MX_GPIO_Init+0xbc>)
 8000a50:	f001 f9b5 	bl	8001dbe <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000a54:	2310      	movs	r3, #16
 8000a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000a6c:	f001 f836 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_RST_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_RST_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000a70:	237b      	movs	r3, #123	; 0x7b
 8000a72:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4619      	mov	r1, r3
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_GPIO_Init+0xbc>)
 8000a88:	f001 f828 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a8c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000a90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0xb8>)
 8000aa2:	f001 f81b 	bl	8001adc <HAL_GPIO_Init>

}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010c00 	.word	0x40010c00

08000abc <Jogo>:
int posx = 40;
int posy = 120;
int raio = 5;
/* USER CODE BEGIN 4 */
void Jogo(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
	 posx = 40;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <Jogo+0x94>)
 8000ac4:	2228      	movs	r2, #40	; 0x28
 8000ac6:	601a      	str	r2, [r3, #0]
	 posy = 120;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <Jogo+0x98>)
 8000aca:	2278      	movs	r2, #120	; 0x78
 8000acc:	601a      	str	r2, [r3, #0]
	 raio = 5;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <Jogo+0x9c>)
 8000ad0:	2205      	movs	r2, #5
 8000ad2:	601a      	str	r2, [r3, #0]

	int contador = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]

	ST7789_Fill_Color(BLACK);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fce1 	bl	80004a0 <ST7789_Fill_Color>
	ST7789_DrawFilledRectangle(20,40,200,180, WHITE);
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	23b4      	movs	r3, #180	; 0xb4
 8000ae6:	22c8      	movs	r2, #200	; 0xc8
 8000ae8:	2128      	movs	r1, #40	; 0x28
 8000aea:	2014      	movs	r0, #20
 8000aec:	f7ff fdc8 	bl	8000680 <ST7789_DrawFilledRectangle>

	while(contador){
 8000af0:	e027      	b.n	8000b42 <Jogo+0x86>
		if(BOTAO11 && posx < 190){
 8000af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <Jogo+0xa0>)
 8000af8:	f001 f94a 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d105      	bne.n	8000b0e <Jogo+0x52>
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <Jogo+0x94>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2bbd      	cmp	r3, #189	; 0xbd
 8000b08:	dc01      	bgt.n	8000b0e <Jogo+0x52>
			MVdireita();
 8000b0a:	f000 f933 	bl	8000d74 <MVdireita>
		}
		if(BOTAO9 && posx > 20){
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	4812      	ldr	r0, [pc, #72]	; (8000b5c <Jogo+0xa0>)
 8000b14:	f001 f93c 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d105      	bne.n	8000b2a <Jogo+0x6e>
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <Jogo+0x94>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b14      	cmp	r3, #20
 8000b24:	dd01      	ble.n	8000b2a <Jogo+0x6e>
			MVesquerda();
 8000b26:	f000 fa45 	bl	8000fb4 <MVesquerda>
			}

		if(BOTAO10){
 8000b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <Jogo+0xa0>)
 8000b30:	f001 f92e 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <Jogo+0x82>

			contador = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
		}
		DesenhaHorizonte();
 8000b3e:	f000 f80f 	bl	8000b60 <DesenhaHorizonte>
	while(contador){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1d4      	bne.n	8000af2 <Jogo+0x36>
	}
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000004 	.word	0x20000004
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	40010800 	.word	0x40010800

08000b60 <DesenhaHorizonte>:
void DesenhaHorizonte(){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

	ST7789_DrawFilledCircle(posx + raio, posy, raio, BLACK);
 8000b64:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <DesenhaHorizonte+0x104>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b218      	sxth	r0, r3
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <DesenhaHorizonte+0x10c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	b219      	sxth	r1, r3
 8000b7c:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	2300      	movs	r3, #0
 8000b84:	f7ff fdd4 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle(posx + (raio * 2), posy, raio, BLACK);
 8000b88:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <DesenhaHorizonte+0x104>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4413      	add	r3, r2
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b218      	sxth	r0, r3
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <DesenhaHorizonte+0x10c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	b219      	sxth	r1, r3
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	2300      	movs	r3, #0
 8000bac:	f7ff fdc0 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle(posx + (raio * 3), posy, raio, BLACK);
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	0052      	lsls	r2, r2, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <DesenhaHorizonte+0x104>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b218      	sxth	r0, r3
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <DesenhaHorizonte+0x10c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	b219      	sxth	r1, r3
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f7ff fdaa 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle((posx + (raio * 4)), (posy), raio, BLACK);
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <DesenhaHorizonte+0x104>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	b218      	sxth	r0, r3
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <DesenhaHorizonte+0x10c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	b219      	sxth	r1, r3
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b21a      	sxth	r2, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f7ff fd96 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle(posx + (raio * 5), posy, raio, BLACK);
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <DesenhaHorizonte+0x104>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b218      	sxth	r0, r3
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <DesenhaHorizonte+0x10c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b219      	sxth	r1, r3
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f7ff fd80 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle((posx + (raio * 6)), (posy), raio, BLACK);
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	0052      	lsls	r2, r2, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <DesenhaHorizonte+0x104>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b218      	sxth	r0, r3
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <DesenhaHorizonte+0x10c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b219      	sxth	r1, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <DesenhaHorizonte+0x108>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f7ff fd69 	bl	8000730 <ST7789_DrawFilledCircle>
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <DesenhaVertical>:
void DesenhaVertical(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

	ST7789_DrawFilledCircle(posx , (posy + raio), raio, BLACK);
 8000c74:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <DesenhaVertical+0xf8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	b218      	sxth	r0, r3
 8000c7a:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <DesenhaVertical+0xfc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <DesenhaVertical+0x100>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4413      	add	r3, r2
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b219      	sxth	r1, r3
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <DesenhaVertical+0x100>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	2300      	movs	r3, #0
 8000c94:	f7ff fd4c 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle(posx , (posy + (raio * 3)), raio, BLACK);
 8000c98:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <DesenhaVertical+0xf8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	b218      	sxth	r0, r3
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <DesenhaVertical+0x100>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	0052      	lsls	r2, r2, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <DesenhaVertical+0xfc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b219      	sxth	r1, r3
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <DesenhaVertical+0x100>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f7ff fd36 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle(posx , (posy+ (raio * 4)), raio, BLACK);
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <DesenhaVertical+0xf8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	b218      	sxth	r0, r3
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <DesenhaVertical+0x100>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <DesenhaVertical+0xfc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4413      	add	r3, r2
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b219      	sxth	r1, r3
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <DesenhaVertical+0x100>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f7ff fd22 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle(posx, (posy+ (raio * 2)), raio, BLACK);
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <DesenhaVertical+0xf8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	b218      	sxth	r0, r3
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <DesenhaVertical+0x100>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <DesenhaVertical+0xfc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	b219      	sxth	r1, r3
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <DesenhaVertical+0x100>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f7ff fd0e 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle(posx, (posy + (raio * 2)), raio, BLACK);
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <DesenhaVertical+0xf8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	b218      	sxth	r0, r3
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <DesenhaVertical+0x100>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <DesenhaVertical+0xfc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b219      	sxth	r1, r3
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <DesenhaVertical+0x100>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	f7ff fcfa 	bl	8000730 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledCircle(posx, (posy+ (raio * 2)), raio, BLACK);
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <DesenhaVertical+0xf8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	b218      	sxth	r0, r3
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <DesenhaVertical+0x100>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <DesenhaVertical+0xfc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b219      	sxth	r1, r3
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <DesenhaVertical+0x100>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f7ff fce6 	bl	8000730 <ST7789_DrawFilledCircle>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	20000008 	.word	0x20000008

08000d74 <MVdireita>:

void MVdireita(){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	while(posx < 190){
 8000d78:	e10d      	b.n	8000f96 <MVdireita+0x222>
					ST7789_DrawFilledCircle(posx, posy, raio, WHITE);
 8000d7a:	4b8a      	ldr	r3, [pc, #552]	; (8000fa4 <MVdireita+0x230>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	b218      	sxth	r0, r3
 8000d80:	4b89      	ldr	r3, [pc, #548]	; (8000fa8 <MVdireita+0x234>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	b219      	sxth	r1, r3
 8000d86:	4b89      	ldr	r3, [pc, #548]	; (8000fac <MVdireita+0x238>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d90:	f7ff fcce 	bl	8000730 <ST7789_DrawFilledCircle>
					DesenhaHorizonte();
 8000d94:	f7ff fee4 	bl	8000b60 <DesenhaHorizonte>
			posx = posx + 5;
 8000d98:	4b82      	ldr	r3, [pc, #520]	; (8000fa4 <MVdireita+0x230>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3305      	adds	r3, #5
 8000d9e:	4a81      	ldr	r2, [pc, #516]	; (8000fa4 <MVdireita+0x230>)
 8000da0:	6013      	str	r3, [r2, #0]
			if(BOTAO10){
 8000da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da6:	4882      	ldr	r0, [pc, #520]	; (8000fb0 <MVdireita+0x23c>)
 8000da8:	f000 fff2 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d174      	bne.n	8000e9c <MVdireita+0x128>
				ST7789_DrawFilledCircle(posx - (raio * 2), posy, raio, WHITE);
 8000db2:	4b7c      	ldr	r3, [pc, #496]	; (8000fa4 <MVdireita+0x230>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b7c      	ldr	r3, [pc, #496]	; (8000fac <MVdireita+0x238>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	b218      	sxth	r0, r3
 8000dc8:	4b77      	ldr	r3, [pc, #476]	; (8000fa8 <MVdireita+0x234>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	b219      	sxth	r1, r3
 8000dce:	4b77      	ldr	r3, [pc, #476]	; (8000fac <MVdireita+0x238>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd8:	f7ff fcaa 	bl	8000730 <ST7789_DrawFilledCircle>
				ST7789_DrawFilledCircle(posx - (raio * 3), posy, raio, WHITE);
 8000ddc:	4b73      	ldr	r3, [pc, #460]	; (8000fac <MVdireita+0x238>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b6e      	ldr	r3, [pc, #440]	; (8000fa4 <MVdireita+0x230>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	b218      	sxth	r0, r3
 8000df6:	4b6c      	ldr	r3, [pc, #432]	; (8000fa8 <MVdireita+0x234>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	b219      	sxth	r1, r3
 8000dfc:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <MVdireita+0x238>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e06:	f7ff fc93 	bl	8000730 <ST7789_DrawFilledCircle>
				ST7789_DrawFilledCircle((posx - (raio * 4)), (posy), raio, WHITE);
 8000e0a:	4b66      	ldr	r3, [pc, #408]	; (8000fa4 <MVdireita+0x230>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b66      	ldr	r3, [pc, #408]	; (8000fac <MVdireita+0x238>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	b218      	sxth	r0, r3
 8000e20:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <MVdireita+0x234>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b219      	sxth	r1, r3
 8000e26:	4b61      	ldr	r3, [pc, #388]	; (8000fac <MVdireita+0x238>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e30:	f7ff fc7e 	bl	8000730 <ST7789_DrawFilledCircle>
				ST7789_DrawFilledCircle(posx - (raio * 5), posy, raio, WHITE);
 8000e34:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <MVdireita+0x238>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	0392      	lsls	r2, r2, #14
 8000e3e:	1ad2      	subs	r2, r2, r3
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b57      	ldr	r3, [pc, #348]	; (8000fa4 <MVdireita+0x230>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	b218      	sxth	r0, r3
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <MVdireita+0x234>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b219      	sxth	r1, r3
 8000e58:	4b54      	ldr	r3, [pc, #336]	; (8000fac <MVdireita+0x238>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e62:	f7ff fc65 	bl	8000730 <ST7789_DrawFilledCircle>
				ST7789_DrawFilledCircle((posx - (raio * 6)), (posy), raio, WHITE);
 8000e66:	4b51      	ldr	r3, [pc, #324]	; (8000fac <MVdireita+0x238>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <MVdireita+0x230>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b218      	sxth	r0, r3
 8000e82:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <MVdireita+0x234>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	b219      	sxth	r1, r3
 8000e88:	4b48      	ldr	r3, [pc, #288]	; (8000fac <MVdireita+0x238>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b21a      	sxth	r2, r3
 8000e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e92:	f7ff fc4d 	bl	8000730 <ST7789_DrawFilledCircle>
				MVbaixo();
 8000e96:	f000 facb 	bl	8001430 <MVbaixo>
				break;
 8000e9a:	e081      	b.n	8000fa0 <MVdireita+0x22c>
			}	if(BOTAO12){
 8000e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea0:	4843      	ldr	r0, [pc, #268]	; (8000fb0 <MVdireita+0x23c>)
 8000ea2:	f000 ff75 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d174      	bne.n	8000f96 <MVdireita+0x222>
				ST7789_DrawFilledCircle(posx - (raio * 2), posy, raio, WHITE);
 8000eac:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <MVdireita+0x230>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b3e      	ldr	r3, [pc, #248]	; (8000fac <MVdireita+0x238>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	b218      	sxth	r0, r3
 8000ec2:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <MVdireita+0x234>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	b219      	sxth	r1, r3
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <MVdireita+0x238>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed2:	f7ff fc2d 	bl	8000730 <ST7789_DrawFilledCircle>
				ST7789_DrawFilledCircle(posx - (raio * 3), posy, raio, WHITE);
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <MVdireita+0x238>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MVdireita+0x230>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b218      	sxth	r0, r3
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MVdireita+0x234>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b219      	sxth	r1, r3
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MVdireita+0x238>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f00:	f7ff fc16 	bl	8000730 <ST7789_DrawFilledCircle>
				ST7789_DrawFilledCircle((posx - (raio * 4)), (posy), raio, WHITE);
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MVdireita+0x230>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MVdireita+0x238>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b218      	sxth	r0, r3
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MVdireita+0x234>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	b219      	sxth	r1, r3
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MVdireita+0x238>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2a:	f7ff fc01 	bl	8000730 <ST7789_DrawFilledCircle>
				ST7789_DrawFilledCircle(posx - (raio * 5), posy, raio, WHITE);
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MVdireita+0x238>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	0392      	lsls	r2, r2, #14
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MVdireita+0x230>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b218      	sxth	r0, r3
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MVdireita+0x234>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	b219      	sxth	r1, r3
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MVdireita+0x238>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5c:	f7ff fbe8 	bl	8000730 <ST7789_DrawFilledCircle>
				ST7789_DrawFilledCircle((posx - (raio * 6)), (posy), raio, WHITE);
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MVdireita+0x238>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MVdireita+0x230>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b218      	sxth	r0, r3
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MVdireita+0x234>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	b219      	sxth	r1, r3
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MVdireita+0x238>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8c:	f7ff fbd0 	bl	8000730 <ST7789_DrawFilledCircle>
				MVcima();
 8000f90:	f000 f934 	bl	80011fc <MVcima>
				break;
 8000f94:	e004      	b.n	8000fa0 <MVdireita+0x22c>
	while(posx < 190){
 8000f96:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <MVdireita+0x230>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2bbd      	cmp	r3, #189	; 0xbd
 8000f9c:	f77f aeed 	ble.w	8000d7a <MVdireita+0x6>
			}
				}

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <MVesquerda>:
void MVesquerda(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

	while(posx > 20){
 8000fb8:	e111      	b.n	80011de <MVesquerda+0x22a>
	ST7789_DrawFilledCircle((posx + (raio * 8)), (posy), raio, WHITE);
 8000fba:	4b8c      	ldr	r3, [pc, #560]	; (80011ec <MVesquerda+0x238>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b8a      	ldr	r3, [pc, #552]	; (80011f0 <MVesquerda+0x23c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b218      	sxth	r0, r3
 8000fd0:	4b88      	ldr	r3, [pc, #544]	; (80011f4 <MVesquerda+0x240>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b219      	sxth	r1, r3
 8000fd6:	4b85      	ldr	r3, [pc, #532]	; (80011ec <MVesquerda+0x238>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe0:	f7ff fba6 	bl	8000730 <ST7789_DrawFilledCircle>
	DesenhaHorizonte();
 8000fe4:	f7ff fdbc 	bl	8000b60 <DesenhaHorizonte>
	posx = posx - 5;
 8000fe8:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <MVesquerda+0x23c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3b05      	subs	r3, #5
 8000fee:	4a80      	ldr	r2, [pc, #512]	; (80011f0 <MVesquerda+0x23c>)
 8000ff0:	6013      	str	r3, [r2, #0]
	if(BOTAO10){
 8000ff2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff6:	4880      	ldr	r0, [pc, #512]	; (80011f8 <MVesquerda+0x244>)
 8000ff8:	f000 feca 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d172      	bne.n	80010e8 <MVesquerda+0x134>
		ST7789_DrawFilledCircle(posx + (raio * 2), posy, raio, WHITE);
 8001002:	4b7a      	ldr	r3, [pc, #488]	; (80011ec <MVesquerda+0x238>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <MVesquerda+0x23c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	4413      	add	r3, r2
 8001014:	b29b      	uxth	r3, r3
 8001016:	b218      	sxth	r0, r3
 8001018:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <MVesquerda+0x240>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	b219      	sxth	r1, r3
 800101e:	4b73      	ldr	r3, [pc, #460]	; (80011ec <MVesquerda+0x238>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b21a      	sxth	r2, r3
 8001024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001028:	f7ff fb82 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx + (raio * 3), posy, raio, WHITE);
 800102c:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <MVesquerda+0x238>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b29b      	uxth	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	0052      	lsls	r2, r2, #1
 8001036:	4413      	add	r3, r2
 8001038:	b29a      	uxth	r2, r3
 800103a:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <MVesquerda+0x23c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	4413      	add	r3, r2
 8001042:	b29b      	uxth	r3, r3
 8001044:	b218      	sxth	r0, r3
 8001046:	4b6b      	ldr	r3, [pc, #428]	; (80011f4 <MVesquerda+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b219      	sxth	r1, r3
 800104c:	4b67      	ldr	r3, [pc, #412]	; (80011ec <MVesquerda+0x238>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b21a      	sxth	r2, r3
 8001052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001056:	f7ff fb6b 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle((posx + (raio * 4)), (posy), raio, WHITE);
 800105a:	4b64      	ldr	r3, [pc, #400]	; (80011ec <MVesquerda+0x238>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <MVesquerda+0x23c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	4413      	add	r3, r2
 800106c:	b29b      	uxth	r3, r3
 800106e:	b218      	sxth	r0, r3
 8001070:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <MVesquerda+0x240>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b219      	sxth	r1, r3
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <MVesquerda+0x238>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b21a      	sxth	r2, r3
 800107c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001080:	f7ff fb56 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx + (raio * 5), posy, raio, WHITE);
 8001084:	4b59      	ldr	r3, [pc, #356]	; (80011ec <MVesquerda+0x238>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	b29b      	uxth	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	4413      	add	r3, r2
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <MVesquerda+0x23c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	b218      	sxth	r0, r3
 800109e:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <MVesquerda+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b219      	sxth	r1, r3
 80010a4:	4b51      	ldr	r3, [pc, #324]	; (80011ec <MVesquerda+0x238>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ae:	f7ff fb3f 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle((posx + (raio * 6)), (posy), raio, WHITE);
 80010b2:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <MVesquerda+0x238>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	0052      	lsls	r2, r2, #1
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <MVesquerda+0x23c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b218      	sxth	r0, r3
 80010ce:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <MVesquerda+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b219      	sxth	r1, r3
 80010d4:	4b45      	ldr	r3, [pc, #276]	; (80011ec <MVesquerda+0x238>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b21a      	sxth	r2, r3
 80010da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010de:	f7ff fb27 	bl	8000730 <ST7789_DrawFilledCircle>
		MVbaixo();
 80010e2:	f000 f9a5 	bl	8001430 <MVbaixo>
		break;
 80010e6:	e07f      	b.n	80011e8 <MVesquerda+0x234>
	}	if(BOTAO12){
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	4842      	ldr	r0, [pc, #264]	; (80011f8 <MVesquerda+0x244>)
 80010ee:	f000 fe4f 	bl	8001d90 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d172      	bne.n	80011de <MVesquerda+0x22a>
		ST7789_DrawFilledCircle(posx + (raio * 2), posy, raio, WHITE);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MVesquerda+0x238>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <MVesquerda+0x23c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4413      	add	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	b218      	sxth	r0, r3
 800110e:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <MVesquerda+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	b219      	sxth	r1, r3
 8001114:	4b35      	ldr	r3, [pc, #212]	; (80011ec <MVesquerda+0x238>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	b21a      	sxth	r2, r3
 800111a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111e:	f7ff fb07 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx + (raio * 3), posy, raio, WHITE);
 8001122:	4b32      	ldr	r3, [pc, #200]	; (80011ec <MVesquerda+0x238>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	0052      	lsls	r2, r2, #1
 800112c:	4413      	add	r3, r2
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <MVesquerda+0x23c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b29b      	uxth	r3, r3
 800113a:	b218      	sxth	r0, r3
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MVesquerda+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b219      	sxth	r1, r3
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MVesquerda+0x238>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b21a      	sxth	r2, r3
 8001148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114c:	f7ff faf0 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle((posx + (raio * 4)), (posy), raio, WHITE);
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MVesquerda+0x238>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <MVesquerda+0x23c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	b218      	sxth	r0, r3
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MVesquerda+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b219      	sxth	r1, r3
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MVesquerda+0x238>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b21a      	sxth	r2, r3
 8001172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001176:	f7ff fadb 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx + (raio * 5), posy, raio, WHITE);
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MVesquerda+0x238>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4413      	add	r3, r2
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MVesquerda+0x23c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4413      	add	r3, r2
 8001190:	b29b      	uxth	r3, r3
 8001192:	b218      	sxth	r0, r3
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MVesquerda+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b219      	sxth	r1, r3
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MVesquerda+0x238>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b21a      	sxth	r2, r3
 80011a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a4:	f7ff fac4 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle((posx + (raio * 6)), (posy), raio, WHITE);
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MVesquerda+0x238>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	0052      	lsls	r2, r2, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MVesquerda+0x23c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4413      	add	r3, r2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b218      	sxth	r0, r3
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MVesquerda+0x240>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b219      	sxth	r1, r3
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MVesquerda+0x238>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d4:	f7ff faac 	bl	8000730 <ST7789_DrawFilledCircle>
		MVcima();
 80011d8:	f000 f810 	bl	80011fc <MVcima>
		break;
 80011dc:	e004      	b.n	80011e8 <MVesquerda+0x234>
	while(posx > 20){
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <MVesquerda+0x23c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b14      	cmp	r3, #20
 80011e4:	f73f aee9 	bgt.w	8000fba <MVesquerda+0x6>
	}
	}
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004
 80011f8:	40010800 	.word	0x40010800

080011fc <MVcima>:
void MVcima(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

	while(posy > 40){
 8001200:	e107      	b.n	8001412 <MVcima+0x216>
	ST7789_DrawFilledCircle(posx, (posy + (raio * 8)), raio, WHITE);
 8001202:	4b87      	ldr	r3, [pc, #540]	; (8001420 <MVcima+0x224>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b218      	sxth	r0, r3
 8001208:	4b86      	ldr	r3, [pc, #536]	; (8001424 <MVcima+0x228>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b85      	ldr	r3, [pc, #532]	; (8001428 <MVcima+0x22c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4413      	add	r3, r2
 800121a:	b29b      	uxth	r3, r3
 800121c:	b219      	sxth	r1, r3
 800121e:	4b81      	ldr	r3, [pc, #516]	; (8001424 <MVcima+0x228>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b21a      	sxth	r2, r3
 8001224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001228:	f7ff fa82 	bl	8000730 <ST7789_DrawFilledCircle>
	DesenhaVertical();
 800122c:	f7ff fd20 	bl	8000c70 <DesenhaVertical>
	posy = posy - 5;
 8001230:	4b7d      	ldr	r3, [pc, #500]	; (8001428 <MVcima+0x22c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3b05      	subs	r3, #5
 8001236:	4a7c      	ldr	r2, [pc, #496]	; (8001428 <MVcima+0x22c>)
 8001238:	6013      	str	r3, [r2, #0]
	if(BOTAO11){
 800123a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123e:	487b      	ldr	r0, [pc, #492]	; (800142c <MVcima+0x230>)
 8001240:	f000 fda6 	bl	8001d90 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d16d      	bne.n	8001326 <MVcima+0x12a>
		ST7789_DrawFilledCircle(posx , (posy + (raio * 3)), raio, WHITE);
 800124a:	4b75      	ldr	r3, [pc, #468]	; (8001420 <MVcima+0x224>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b218      	sxth	r0, r3
 8001250:	4b74      	ldr	r3, [pc, #464]	; (8001424 <MVcima+0x228>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	0052      	lsls	r2, r2, #1
 800125a:	4413      	add	r3, r2
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b72      	ldr	r3, [pc, #456]	; (8001428 <MVcima+0x22c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	b219      	sxth	r1, r3
 800126a:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <MVcima+0x228>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b21a      	sxth	r2, r3
 8001270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001274:	f7ff fa5c 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx , (posy+ (raio * 4)), raio, WHITE);
 8001278:	4b69      	ldr	r3, [pc, #420]	; (8001420 <MVcima+0x224>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b218      	sxth	r0, r3
 800127e:	4b69      	ldr	r3, [pc, #420]	; (8001424 <MVcima+0x228>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b67      	ldr	r3, [pc, #412]	; (8001428 <MVcima+0x22c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	b219      	sxth	r1, r3
 8001294:	4b63      	ldr	r3, [pc, #396]	; (8001424 <MVcima+0x228>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b21a      	sxth	r2, r3
 800129a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129e:	f7ff fa47 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy+ (raio * 2)), raio, WHITE);
 80012a2:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <MVcima+0x224>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b218      	sxth	r0, r3
 80012a8:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <MVcima+0x228>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <MVcima+0x22c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b219      	sxth	r1, r3
 80012be:	4b59      	ldr	r3, [pc, #356]	; (8001424 <MVcima+0x228>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c8:	f7ff fa32 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy + (raio * 2)), raio, WHITE);
 80012cc:	4b54      	ldr	r3, [pc, #336]	; (8001420 <MVcima+0x224>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	b218      	sxth	r0, r3
 80012d2:	4b54      	ldr	r3, [pc, #336]	; (8001424 <MVcima+0x228>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b52      	ldr	r3, [pc, #328]	; (8001428 <MVcima+0x22c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	b219      	sxth	r1, r3
 80012e8:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <MVcima+0x228>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f2:	f7ff fa1d 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy+ (raio * 2)), raio, WHITE);
 80012f6:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <MVcima+0x224>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b218      	sxth	r0, r3
 80012fc:	4b49      	ldr	r3, [pc, #292]	; (8001424 <MVcima+0x228>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <MVcima+0x22c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4413      	add	r3, r2
 800130e:	b29b      	uxth	r3, r3
 8001310:	b219      	sxth	r1, r3
 8001312:	4b44      	ldr	r3, [pc, #272]	; (8001424 <MVcima+0x228>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b21a      	sxth	r2, r3
 8001318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131c:	f7ff fa08 	bl	8000730 <ST7789_DrawFilledCircle>
		MVdireita();
 8001320:	f7ff fd28 	bl	8000d74 <MVdireita>
		break;
 8001324:	e07a      	b.n	800141c <MVcima+0x220>
	}	if(BOTAO9){
 8001326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132a:	4840      	ldr	r0, [pc, #256]	; (800142c <MVcima+0x230>)
 800132c:	f000 fd30 	bl	8001d90 <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d16d      	bne.n	8001412 <MVcima+0x216>
		ST7789_DrawFilledCircle(posx , (posy + (raio * 3)), raio, WHITE);
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <MVcima+0x224>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b218      	sxth	r0, r3
 800133c:	4b39      	ldr	r3, [pc, #228]	; (8001424 <MVcima+0x228>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0052      	lsls	r2, r2, #1
 8001346:	4413      	add	r3, r2
 8001348:	b29a      	uxth	r2, r3
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <MVcima+0x22c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b29b      	uxth	r3, r3
 8001354:	b219      	sxth	r1, r3
 8001356:	4b33      	ldr	r3, [pc, #204]	; (8001424 <MVcima+0x228>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b21a      	sxth	r2, r3
 800135c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001360:	f7ff f9e6 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx , (posy+ (raio * 4)), raio, WHITE);
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MVcima+0x224>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b218      	sxth	r0, r3
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <MVcima+0x228>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <MVcima+0x22c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b219      	sxth	r1, r3
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MVcima+0x228>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b21a      	sxth	r2, r3
 8001386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138a:	f7ff f9d1 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy+ (raio * 2)), raio, WHITE);
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MVcima+0x224>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b218      	sxth	r0, r3
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MVcima+0x228>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MVcima+0x22c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b219      	sxth	r1, r3
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MVcima+0x228>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b4:	f7ff f9bc 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy + (raio * 2)), raio, WHITE);
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MVcima+0x224>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b218      	sxth	r0, r3
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MVcima+0x228>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MVcima+0x22c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b219      	sxth	r1, r3
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MVcima+0x228>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	b21a      	sxth	r2, r3
 80013da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013de:	f7ff f9a7 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy+ (raio * 2)), raio, WHITE);
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MVcima+0x224>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b218      	sxth	r0, r3
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MVcima+0x228>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <MVcima+0x22c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b219      	sxth	r1, r3
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MVcima+0x228>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b21a      	sxth	r2, r3
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	f7ff f992 	bl	8000730 <ST7789_DrawFilledCircle>
		MVesquerda();
 800140c:	f7ff fdd2 	bl	8000fb4 <MVesquerda>
		break;
 8001410:	e004      	b.n	800141c <MVcima+0x220>
	while(posy > 40){
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <MVcima+0x22c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b28      	cmp	r3, #40	; 0x28
 8001418:	f73f aef3 	bgt.w	8001202 <MVcima+0x6>
	}
	}
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000000 	.word	0x20000000
 8001424:	20000008 	.word	0x20000008
 8001428:	20000004 	.word	0x20000004
 800142c:	40010800 	.word	0x40010800

08001430 <MVbaixo>:
void MVbaixo(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

	while(posy < 220){
 8001434:	e107      	b.n	8001646 <MVbaixo+0x216>
	ST7789_DrawFilledCircle((posx + (raio * 8)), (posy), raio, WHITE);
 8001436:	4b87      	ldr	r3, [pc, #540]	; (8001654 <MVbaixo+0x224>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	b29a      	uxth	r2, r3
 8001440:	4b85      	ldr	r3, [pc, #532]	; (8001658 <MVbaixo+0x228>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4413      	add	r3, r2
 8001448:	b29b      	uxth	r3, r3
 800144a:	b218      	sxth	r0, r3
 800144c:	4b83      	ldr	r3, [pc, #524]	; (800165c <MVbaixo+0x22c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b219      	sxth	r1, r3
 8001452:	4b80      	ldr	r3, [pc, #512]	; (8001654 <MVbaixo+0x224>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b21a      	sxth	r2, r3
 8001458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145c:	f7ff f968 	bl	8000730 <ST7789_DrawFilledCircle>
	DesenhaVertical();
 8001460:	f7ff fc06 	bl	8000c70 <DesenhaVertical>
	posy = posy + 5;
 8001464:	4b7d      	ldr	r3, [pc, #500]	; (800165c <MVbaixo+0x22c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3305      	adds	r3, #5
 800146a:	4a7c      	ldr	r2, [pc, #496]	; (800165c <MVbaixo+0x22c>)
 800146c:	6013      	str	r3, [r2, #0]
	if(BOTAO11){
 800146e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001472:	487b      	ldr	r0, [pc, #492]	; (8001660 <MVbaixo+0x230>)
 8001474:	f000 fc8c 	bl	8001d90 <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d16d      	bne.n	800155a <MVbaixo+0x12a>
		ST7789_DrawFilledCircle(posx , (posy - (raio * 3)), raio, WHITE);
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <MVbaixo+0x228>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b218      	sxth	r0, r3
 8001484:	4b73      	ldr	r3, [pc, #460]	; (8001654 <MVbaixo+0x224>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <MVbaixo+0x22c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4413      	add	r3, r2
 800149a:	b29b      	uxth	r3, r3
 800149c:	b219      	sxth	r1, r3
 800149e:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <MVbaixo+0x224>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a8:	f7ff f942 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx , (posy - (raio * 4)), raio, WHITE);
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <MVbaixo+0x228>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b218      	sxth	r0, r3
 80014b2:	4b6a      	ldr	r3, [pc, #424]	; (800165c <MVbaixo+0x22c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b66      	ldr	r3, [pc, #408]	; (8001654 <MVbaixo+0x224>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b219      	sxth	r1, r3
 80014c8:	4b62      	ldr	r3, [pc, #392]	; (8001654 <MVbaixo+0x224>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d2:	f7ff f92d 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy - (raio * 2)), raio, WHITE);
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <MVbaixo+0x228>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b218      	sxth	r0, r3
 80014dc:	4b5f      	ldr	r3, [pc, #380]	; (800165c <MVbaixo+0x22c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <MVbaixo+0x224>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b219      	sxth	r1, r3
 80014f2:	4b58      	ldr	r3, [pc, #352]	; (8001654 <MVbaixo+0x224>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fc:	f7ff f918 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy  - (raio * 2)), raio, WHITE);
 8001500:	4b55      	ldr	r3, [pc, #340]	; (8001658 <MVbaixo+0x228>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b218      	sxth	r0, r3
 8001506:	4b55      	ldr	r3, [pc, #340]	; (800165c <MVbaixo+0x22c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b51      	ldr	r3, [pc, #324]	; (8001654 <MVbaixo+0x224>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b29b      	uxth	r3, r3
 800151a:	b219      	sxth	r1, r3
 800151c:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <MVbaixo+0x224>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b21a      	sxth	r2, r3
 8001522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001526:	f7ff f903 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy - (raio * 2)), raio, WHITE);
 800152a:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <MVbaixo+0x228>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b218      	sxth	r0, r3
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <MVbaixo+0x22c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <MVbaixo+0x224>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	b29b      	uxth	r3, r3
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	b29b      	uxth	r3, r3
 8001544:	b219      	sxth	r1, r3
 8001546:	4b43      	ldr	r3, [pc, #268]	; (8001654 <MVbaixo+0x224>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b21a      	sxth	r2, r3
 800154c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001550:	f7ff f8ee 	bl	8000730 <ST7789_DrawFilledCircle>
		MVdireita();
 8001554:	f7ff fc0e 	bl	8000d74 <MVdireita>
		break;
 8001558:	e07a      	b.n	8001650 <MVbaixo+0x220>
	}	if(BOTAO9){
 800155a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155e:	4840      	ldr	r0, [pc, #256]	; (8001660 <MVbaixo+0x230>)
 8001560:	f000 fc16 	bl	8001d90 <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d16d      	bne.n	8001646 <MVbaixo+0x216>
		ST7789_DrawFilledCircle(posx , (posy - (raio * 3)), raio, WHITE);
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <MVbaixo+0x228>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b218      	sxth	r0, r3
 8001570:	4b38      	ldr	r3, [pc, #224]	; (8001654 <MVbaixo+0x224>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b29b      	uxth	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <MVbaixo+0x22c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	b219      	sxth	r1, r3
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <MVbaixo+0x224>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b21a      	sxth	r2, r3
 8001590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001594:	f7ff f8cc 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx , (posy - (raio * 4)), raio, WHITE);
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <MVbaixo+0x228>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b218      	sxth	r0, r3
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <MVbaixo+0x22c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MVbaixo+0x224>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b219      	sxth	r1, r3
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <MVbaixo+0x224>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015be:	f7ff f8b7 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy - (raio * 2)), raio, WHITE);
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MVbaixo+0x228>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b218      	sxth	r0, r3
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <MVbaixo+0x22c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MVbaixo+0x224>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b219      	sxth	r1, r3
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MVbaixo+0x224>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e8:	f7ff f8a2 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy - (raio * 2)), raio, WHITE);
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MVbaixo+0x228>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b218      	sxth	r0, r3
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MVbaixo+0x22c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MVbaixo+0x224>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	b29b      	uxth	r3, r3
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b29b      	uxth	r3, r3
 8001606:	b219      	sxth	r1, r3
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MVbaixo+0x224>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b21a      	sxth	r2, r3
 800160e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001612:	f7ff f88d 	bl	8000730 <ST7789_DrawFilledCircle>
		ST7789_DrawFilledCircle(posx, (posy - (raio * 2)), raio, WHITE);
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MVbaixo+0x228>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b218      	sxth	r0, r3
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MVbaixo+0x22c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MVbaixo+0x224>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	b29b      	uxth	r3, r3
 8001630:	b219      	sxth	r1, r3
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MVbaixo+0x224>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b21a      	sxth	r2, r3
 8001638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163c:	f7ff f878 	bl	8000730 <ST7789_DrawFilledCircle>
		MVesquerda();
 8001640:	f7ff fcb8 	bl	8000fb4 <MVesquerda>
		break;
 8001644:	e004      	b.n	8001650 <MVbaixo+0x220>
	while(posy < 220){
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <MVbaixo+0x22c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2bdb      	cmp	r3, #219	; 0xdb
 800164c:	f77f aef3 	ble.w	8001436 <MVbaixo+0x6>
	}
	}
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000008 	.word	0x20000008
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004
 8001660:	40010800 	.word	0x40010800

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166a:	e7fe      	b.n	800166a <Error_Handler+0x6>

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_MspInit+0x5c>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <HAL_MspInit+0x5c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_MspInit+0x5c>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_MspInit+0x5c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_MspInit+0x5c>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_MspInit+0x5c>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_MspInit+0x60>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_MspInit+0x60>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000

080016d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_SPI_MspInit+0x88>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d12f      	bne.n	8001750 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_SPI_MspInit+0x8c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_SPI_MspInit+0x8c>)
 80016f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_SPI_MspInit+0x8c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_SPI_MspInit+0x8c>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a13      	ldr	r2, [pc, #76]	; (800175c <HAL_SPI_MspInit+0x8c>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_SPI_MspInit+0x8c>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001720:	23a0      	movs	r3, #160	; 0xa0
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <HAL_SPI_MspInit+0x90>)
 8001734:	f000 f9d2 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_SPI_MspInit+0x90>)
 800174c:	f000 f9c6 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40013000 	.word	0x40013000
 800175c:	40021000 	.word	0x40021000
 8001760:	40010800 	.word	0x40010800

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 f875 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
	...

080017c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	; (80017f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	; (8001804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017e6:	f7ff ffe4 	bl	80017b2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f001 f951 	bl	8002a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ee:	f7ff f885 	bl	80008fc <main>
  bx lr
 80017f2:	4770      	bx	lr
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80017fc:	08002be8 	.word	0x08002be8
  ldr r2, =_sbss
 8001800:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001804:	200000a4 	.word	0x200000a4

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_Init+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_Init+0x28>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f929 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff ff20 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f933 	bl	8001ac2 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f909 	bl	8001a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000014 	.word	0x20000014
 8001894:	20000010 	.word	0x20000010

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x1c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_IncTick+0x20>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000014 	.word	0x20000014
 80018b8:	200000a0 	.word	0x200000a0

080018bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	200000a0 	.word	0x200000a0

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff fff0 	bl	80018bc <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_Delay+0x40>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffe0 	bl	80018bc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000014 	.word	0x20000014

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff ff90 	bl	8001978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff49 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff5e 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff90 	bl	80019cc <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5f 	bl	8001978 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffb0 	bl	8001a30 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b08b      	sub	sp, #44	; 0x2c
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	e127      	b.n	8001d40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af0:	2201      	movs	r2, #1
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8116 	bne.w	8001d3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d034      	beq.n	8001b80 <HAL_GPIO_Init+0xa4>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d80d      	bhi.n	8001b36 <HAL_GPIO_Init+0x5a>
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d02b      	beq.n	8001b76 <HAL_GPIO_Init+0x9a>
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d804      	bhi.n	8001b2c <HAL_GPIO_Init+0x50>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d031      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d01c      	beq.n	8001b64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2a:	e048      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d043      	beq.n	8001bb8 <HAL_GPIO_Init+0xdc>
 8001b30:	2b11      	cmp	r3, #17
 8001b32:	d01b      	beq.n	8001b6c <HAL_GPIO_Init+0x90>
          break;
 8001b34:	e043      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b36:	4a89      	ldr	r2, [pc, #548]	; (8001d5c <HAL_GPIO_Init+0x280>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d026      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b3c:	4a87      	ldr	r2, [pc, #540]	; (8001d5c <HAL_GPIO_Init+0x280>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d806      	bhi.n	8001b50 <HAL_GPIO_Init+0x74>
 8001b42:	4a87      	ldr	r2, [pc, #540]	; (8001d60 <HAL_GPIO_Init+0x284>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d020      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b48:	4a86      	ldr	r2, [pc, #536]	; (8001d64 <HAL_GPIO_Init+0x288>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01d      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
          break;
 8001b4e:	e036      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b50:	4a85      	ldr	r2, [pc, #532]	; (8001d68 <HAL_GPIO_Init+0x28c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d019      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b56:	4a85      	ldr	r2, [pc, #532]	; (8001d6c <HAL_GPIO_Init+0x290>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d016      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
 8001b5c:	4a84      	ldr	r2, [pc, #528]	; (8001d70 <HAL_GPIO_Init+0x294>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0xae>
          break;
 8001b62:	e02c      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e028      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	3304      	adds	r3, #4
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e023      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e01e      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	330c      	adds	r3, #12
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e019      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b92:	2304      	movs	r3, #4
 8001b94:	623b      	str	r3, [r7, #32]
          break;
 8001b96:	e012      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	611a      	str	r2, [r3, #16]
          break;
 8001baa:	e008      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bac:	2308      	movs	r3, #8
 8001bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	615a      	str	r2, [r3, #20]
          break;
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2bff      	cmp	r3, #255	; 0xff
 8001bc2:	d801      	bhi.n	8001bc8 <HAL_GPIO_Init+0xec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	e001      	b.n	8001bcc <HAL_GPIO_Init+0xf0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d802      	bhi.n	8001bda <HAL_GPIO_Init+0xfe>
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x104>
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3b08      	subs	r3, #8
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	210f      	movs	r1, #15
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	6a39      	ldr	r1, [r7, #32]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8096 	beq.w	8001d3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0e:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_GPIO_Init+0x298>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c26:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x29c>)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_GPIO_Init+0x2a0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x19e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4a      	ldr	r2, [pc, #296]	; (8001d80 <HAL_GPIO_Init+0x2a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x19a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_GPIO_Init+0x2a8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x196>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x2ac>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x192>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x1a0>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c8c:	493a      	ldr	r1, [pc, #232]	; (8001d78 <HAL_GPIO_Init+0x29c>)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4938      	ldr	r1, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4933      	ldr	r1, [pc, #204]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cce:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	492e      	ldr	r1, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4929      	ldr	r1, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	4924      	ldr	r1, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	491f      	ldr	r1, [pc, #124]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	491a      	ldr	r1, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60cb      	str	r3, [r1, #12]
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4915      	ldr	r1, [pc, #84]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f47f aed0 	bne.w	8001af0 <HAL_GPIO_Init+0x14>
  }
}
 8001d50:	bf00      	nop
 8001d52:	372c      	adds	r7, #44	; 0x2c
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	10210000 	.word	0x10210000
 8001d60:	10110000 	.word	0x10110000
 8001d64:	10120000 	.word	0x10120000
 8001d68:	10310000 	.word	0x10310000
 8001d6c:	10320000 	.word	0x10320000
 8001d70:	10220000 	.word	0x10220000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40010800 	.word	0x40010800
 8001d80:	40010c00 	.word	0x40010c00
 8001d84:	40011000 	.word	0x40011000
 8001d88:	40011400 	.word	0x40011400
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	807b      	strh	r3, [r7, #2]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dda:	e003      	b.n	8001de4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e26c      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8087 	beq.w	8001f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e10:	4b92      	ldr	r3, [pc, #584]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d00c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e1c:	4b8f      	ldr	r3, [pc, #572]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d112      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5e>
 8001e28:	4b8c      	ldr	r3, [pc, #560]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e34:	d10b      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e36:	4b89      	ldr	r3, [pc, #548]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d06c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x12c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d168      	bne.n	8001f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e246      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x76>
 8001e58:	4b80      	ldr	r3, [pc, #512]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a7f      	ldr	r2, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	e02e      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x98>
 8001e6e:	4b7b      	ldr	r3, [pc, #492]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7a      	ldr	r2, [pc, #488]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b78      	ldr	r3, [pc, #480]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a77      	ldr	r2, [pc, #476]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e01d      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0xbc>
 8001e92:	4b72      	ldr	r3, [pc, #456]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a71      	ldr	r2, [pc, #452]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b6f      	ldr	r3, [pc, #444]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6e      	ldr	r2, [pc, #440]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
 8001eac:	4b6b      	ldr	r3, [pc, #428]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6a      	ldr	r2, [pc, #424]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b68      	ldr	r3, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a67      	ldr	r2, [pc, #412]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fcf6 	bl	80018bc <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff fcf2 	bl	80018bc <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1fa      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xe4>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fce2 	bl	80018bc <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff fcde 	bl	80018bc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e1e6      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x10c>
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d063      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f36:	4b49      	ldr	r3, [pc, #292]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d11c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x18c>
 8001f42:	4b46      	ldr	r3, [pc, #280]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d116      	bne.n	8001f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x176>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e1ba      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4939      	ldr	r1, [pc, #228]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	e03a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fc97 	bl	80018bc <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff fc93 	bl	80018bc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e19b      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4927      	ldr	r1, [pc, #156]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fc76 	bl	80018bc <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fc72 	bl	80018bc <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e17a      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d03a      	beq.n	8002074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d019      	beq.n	800203a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7ff fc56 	bl	80018bc <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff fc52 	bl	80018bc <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e15a      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_RCC_OscConfig+0x26c>)
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002032:	2001      	movs	r0, #1
 8002034:	f000 faa8 	bl	8002588 <RCC_Delay>
 8002038:	e01c      	b.n	8002074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7ff fc3c 	bl	80018bc <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002046:	e00f      	b.n	8002068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002048:	f7ff fc38 	bl	80018bc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d908      	bls.n	8002068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e140      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	42420000 	.word	0x42420000
 8002064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	4b9e      	ldr	r3, [pc, #632]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e9      	bne.n	8002048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a6 	beq.w	80021ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b97      	ldr	r3, [pc, #604]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10d      	bne.n	80020ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b94      	ldr	r3, [pc, #592]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a93      	ldr	r2, [pc, #588]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b91      	ldr	r3, [pc, #580]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	4b8e      	ldr	r3, [pc, #568]	; (80022e8 <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ba:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a8a      	ldr	r2, [pc, #552]	; (80022e8 <HAL_RCC_OscConfig+0x4f8>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fbf9 	bl	80018bc <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7ff fbf5 	bl	80018bc <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b64      	cmp	r3, #100	; 0x64
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0fd      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <HAL_RCC_OscConfig+0x4f8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x312>
 80020f4:	4b7b      	ldr	r3, [pc, #492]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a7a      	ldr	r2, [pc, #488]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	e02d      	b.n	800215e <HAL_RCC_OscConfig+0x36e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x334>
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a75      	ldr	r2, [pc, #468]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6213      	str	r3, [r2, #32]
 8002116:	4b73      	ldr	r3, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a72      	ldr	r2, [pc, #456]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	e01c      	b.n	800215e <HAL_RCC_OscConfig+0x36e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d10c      	bne.n	8002146 <HAL_RCC_OscConfig+0x356>
 800212c:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a6c      	ldr	r2, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a69      	ldr	r2, [pc, #420]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	e00b      	b.n	800215e <HAL_RCC_OscConfig+0x36e>
 8002146:	4b67      	ldr	r3, [pc, #412]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a66      	ldr	r2, [pc, #408]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	4b64      	ldr	r3, [pc, #400]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a63      	ldr	r2, [pc, #396]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d015      	beq.n	8002192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002166:	f7ff fba9 	bl	80018bc <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7ff fba5 	bl	80018bc <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0ab      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ee      	beq.n	800216e <HAL_RCC_OscConfig+0x37e>
 8002190:	e014      	b.n	80021bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff fb93 	bl	80018bc <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7ff fb8f 	bl	80018bc <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e095      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ee      	bne.n	800219a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a47      	ldr	r2, [pc, #284]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8081 	beq.w	80022da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d8:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d061      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d146      	bne.n	800227a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ec:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <HAL_RCC_OscConfig+0x4fc>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7ff fb63 	bl	80018bc <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7ff fb5f 	bl	80018bc <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e067      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d108      	bne.n	8002234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002222:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	492d      	ldr	r1, [pc, #180]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a19      	ldr	r1, [r3, #32]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	430b      	orrs	r3, r1
 8002246:	4927      	ldr	r1, [pc, #156]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_OscConfig+0x4fc>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fb33 	bl	80018bc <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff fb2f 	bl	80018bc <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e037      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x46a>
 8002278:	e02f      	b.n	80022da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_RCC_OscConfig+0x4fc>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fb1c 	bl	80018bc <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff fb18 	bl	80018bc <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e020      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x498>
 80022a6:	e018      	b.n	80022da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e013      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42420060 	.word	0x42420060

080022f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0d0      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d910      	bls.n	8002334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4965      	ldr	r1, [pc, #404]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0b8      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800234c:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002356:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a52      	ldr	r2, [pc, #328]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800236e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	494d      	ldr	r1, [pc, #308]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d040      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d115      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e073      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06b      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4936      	ldr	r1, [pc, #216]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7ff fa6c 	bl	80018bc <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff fa68 	bl	80018bc <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e053      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d210      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 0207 	bic.w	r2, r3, #7
 8002426:	4922      	ldr	r1, [pc, #136]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e032      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4916      	ldr	r1, [pc, #88]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	490e      	ldr	r1, [pc, #56]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800247e:	f000 f821 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002482:	4601      	mov	r1, r0
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	fa21 f303 	lsr.w	r3, r1, r3
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1cc>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x1d0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f9ca 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08002bd0 	.word	0x08002bd0
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	20000010 	.word	0x20000010

080024c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	b490      	push	{r4, r7}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024cc:	1d3c      	adds	r4, r7, #4
 80024ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024d4:	4b28      	ldr	r3, [pc, #160]	; (8002578 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d002      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x40>
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x46>
 8002502:	e02d      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002506:	623b      	str	r3, [r7, #32]
      break;
 8002508:	e02d      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	0c9b      	lsrs	r3, r3, #18
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002516:	4413      	add	r3, r2
 8002518:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800251c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c5b      	lsrs	r3, r3, #17
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002536:	4413      	add	r3, r2
 8002538:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800253c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002542:	fb02 f203 	mul.w	r2, r2, r3
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e004      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	623b      	str	r3, [r7, #32]
      break;
 800255e:	e002      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002562:	623b      	str	r3, [r7, #32]
      break;
 8002564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002566:	6a3b      	ldr	r3, [r7, #32]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3728      	adds	r7, #40	; 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bc90      	pop	{r4, r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	08002bbc 	.word	0x08002bbc
 8002578:	08002bcc 	.word	0x08002bcc
 800257c:	40021000 	.word	0x40021000
 8002580:	007a1200 	.word	0x007a1200
 8002584:	003d0900 	.word	0x003d0900

08002588 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <RCC_Delay+0x34>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <RCC_Delay+0x38>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0a5b      	lsrs	r3, r3, #9
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a4:	bf00      	nop
  }
  while (Delay --);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1e5a      	subs	r2, r3, #1
 80025aa:	60fa      	str	r2, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f9      	bne.n	80025a4 <RCC_Delay+0x1c>
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	2000000c 	.word	0x2000000c
 80025c0:	10624dd3 	.word	0x10624dd3

080025c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e076      	b.n	80026c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d108      	bne.n	80025f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e6:	d009      	beq.n	80025fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
 80025ee:	e005      	b.n	80025fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff f85a 	bl	80016d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002632:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	ea42 0103 	orr.w	r1, r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	0c1a      	lsrs	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f002 0204 	and.w	r2, r2, #4
 80026a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_SPI_Transmit+0x22>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e126      	b.n	800293c <HAL_SPI_Transmit+0x270>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026f6:	f7ff f8e1 	bl	80018bc <HAL_GetTick>
 80026fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d002      	beq.n	8002712 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800270c:	2302      	movs	r3, #2
 800270e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002710:	e10b      	b.n	800292a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_SPI_Transmit+0x52>
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002722:	e102      	b.n	800292a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2203      	movs	r2, #3
 8002728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800276a:	d10f      	bne.n	800278c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800278a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d007      	beq.n	80027aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b2:	d14b      	bne.n	800284c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_SPI_Transmit+0xf6>
 80027bc:	8afb      	ldrh	r3, [r7, #22]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d13e      	bne.n	8002840 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	1c9a      	adds	r2, r3, #2
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027e6:	e02b      	b.n	8002840 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d112      	bne.n	800281c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	881a      	ldrh	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	1c9a      	adds	r2, r3, #2
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	86da      	strh	r2, [r3, #54]	; 0x36
 800281a:	e011      	b.n	8002840 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800281c:	f7ff f84e 	bl	80018bc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d803      	bhi.n	8002834 <HAL_SPI_Transmit+0x168>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d102      	bne.n	800283a <HAL_SPI_Transmit+0x16e>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800283e:	e074      	b.n	800292a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ce      	bne.n	80027e8 <HAL_SPI_Transmit+0x11c>
 800284a:	e04c      	b.n	80028e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_SPI_Transmit+0x18e>
 8002854:	8afb      	ldrh	r3, [r7, #22]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d140      	bne.n	80028dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002880:	e02c      	b.n	80028dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d113      	bne.n	80028b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	330c      	adds	r3, #12
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80028b6:	e011      	b.n	80028dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028b8:	f7ff f800 	bl	80018bc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d803      	bhi.n	80028d0 <HAL_SPI_Transmit+0x204>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d102      	bne.n	80028d6 <HAL_SPI_Transmit+0x20a>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028da:	e026      	b.n	800292a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1cd      	bne.n	8002882 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f8b2 	bl	8002a54 <SPI_EndRxTxTransaction>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	77fb      	strb	r3, [r7, #31]
 8002926:	e000      	b.n	800292a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002928:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800293a:	7ffb      	ldrb	r3, [r7, #31]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002954:	f7fe ffb2 	bl	80018bc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002964:	f7fe ffaa 	bl	80018bc <HAL_GetTick>
 8002968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	015b      	lsls	r3, r3, #5
 8002970:	0d1b      	lsrs	r3, r3, #20
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297a:	e054      	b.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d050      	beq.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002984:	f7fe ff9a 	bl	80018bc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	429a      	cmp	r2, r3
 8002992:	d902      	bls.n	800299a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d13d      	bne.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b2:	d111      	bne.n	80029d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029bc:	d004      	beq.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c6:	d107      	bne.n	80029d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e0:	d10f      	bne.n	8002a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e017      	b.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d19b      	bne.n	800297c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000000c 	.word	0x2000000c

08002a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff ff6a 	bl	8002944 <SPI_WaitFlagStateUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f043 0220 	orr.w	r2, r3, #32
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e000      	b.n	8002a88 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <__libc_init_array>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	2500      	movs	r5, #0
 8002a94:	4e0c      	ldr	r6, [pc, #48]	; (8002ac8 <__libc_init_array+0x38>)
 8002a96:	4c0d      	ldr	r4, [pc, #52]	; (8002acc <__libc_init_array+0x3c>)
 8002a98:	1ba4      	subs	r4, r4, r6
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	42a5      	cmp	r5, r4
 8002a9e:	d109      	bne.n	8002ab4 <__libc_init_array+0x24>
 8002aa0:	f000 f822 	bl	8002ae8 <_init>
 8002aa4:	2500      	movs	r5, #0
 8002aa6:	4e0a      	ldr	r6, [pc, #40]	; (8002ad0 <__libc_init_array+0x40>)
 8002aa8:	4c0a      	ldr	r4, [pc, #40]	; (8002ad4 <__libc_init_array+0x44>)
 8002aaa:	1ba4      	subs	r4, r4, r6
 8002aac:	10a4      	asrs	r4, r4, #2
 8002aae:	42a5      	cmp	r5, r4
 8002ab0:	d105      	bne.n	8002abe <__libc_init_array+0x2e>
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
 8002ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ab8:	4798      	blx	r3
 8002aba:	3501      	adds	r5, #1
 8002abc:	e7ee      	b.n	8002a9c <__libc_init_array+0xc>
 8002abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ac2:	4798      	blx	r3
 8002ac4:	3501      	adds	r5, #1
 8002ac6:	e7f2      	b.n	8002aae <__libc_init_array+0x1e>
 8002ac8:	08002be0 	.word	0x08002be0
 8002acc:	08002be0 	.word	0x08002be0
 8002ad0:	08002be0 	.word	0x08002be0
 8002ad4:	08002be4 	.word	0x08002be4

08002ad8 <memset>:
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4402      	add	r2, r0
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <memset+0xa>
 8002ae0:	4770      	bx	lr
 8002ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae6:	e7f9      	b.n	8002adc <memset+0x4>

08002ae8 <_init>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr

08002af4 <_fini>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	bf00      	nop
 8002af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afa:	bc08      	pop	{r3}
 8002afc:	469e      	mov	lr, r3
 8002afe:	4770      	bx	lr
