// Online C compiler to run C program online
#include <stm32f4xx_h1.h>
#include <st7789.h>
//definições dos pinos para leds e botões
#define LED_GREEN_PIN GPIO_PIN_12
#define LED_GREEN_GPIO_PORT GPIOD
#define LED_BLUE_PIN GPIO_PIN_15
#define LED_BLUE_GPIO_PORT GPIOD
#define BUTTON_UP_PIN GPIO_PIN_0
#define BUTTON_UP_GPIO_PORT GPIOA
#define BUTTON_DOWN_PIN GPIO_PIN_1
#define BUTTON_DOWN_GPIO_PORT GPIOA
#define BUTTON_LEFT_PIN GPIO_PIN_2
#define BUTTON_LEFT_GPIO_PORT GPIOA
#define BUTTON_RIGHT_PIN GPIO_PIN_3
#define BUTTON_RIGHT_GPIO_PORT GPIOA
//estrutura para representar a posição de um objeto
typedef struct {
    int x;
    int y;
   } Position; 
   /* enumeração para representar as direções da cobra */
   typedef enum{
       UP,
       DOWN,
       LEFT,
       RIGHT
   } Direction; // processo basico de enumeração
   typedef struct{
        Position body[100]; //array para armazenar as posições de cobras
        int length;
        Direction direction;
   } Snake;
   //variaveis globais
   Snake snake; //cobrinha
   Position apple; //posição do coletavel
   int score = 0; //placar do jogador
   int record = 0; //recorde de coletaveis
   int seconds = 0; //contador de segundo
   //função para inicializar e configurar o jogo
   void Game_init(){
   //configurar gpios para leds como saida;
   GPIO_inittypedef GPIO_initstruct = {0};
   GPIO_initstruct.pin = LED_GREEN_PIN | LED_BLUE_PIN;
   GPIO.initstruct.mode = GPIO_MODE_OUTPUT_PP;
   GPIO_initstruct.pull = GPIO_NO_PULL;
   GPIO_intstruct.speed = GPIO_SPEED_FREQ_LOW;
   HAL_GPIO_INIT(GPIOD,&GPIO_INIT_STRUCT);
   //configurar gpios para botões como entrada
   GPIO.initstruct.pin = BUTTON_UP_PIN | BUTTON_DOWN_PIN | BUTTON_RIGHT_PIN | BUTTON_LEFT_PIN;
   GPIO_initstruct.mode = GPIO_MODE_INPUT;
   GPIO_initstruct.pull = GPIO_PULLUP;
   HAL_GPIO_INIT(GPIOA,&GPIO_INIT_STRUCT);
   //inicializar temporizador
   __HAL_RSC_TIM2_CLK_ENABLE();
   TIM_HandleTypeDef htim2;
   htim2.Instance = TIM2;
   htim2.Init.Prescaler = 83; //PreScaler para contar em intervalos de um segundo(84 MHZ / 84 = 1 MHZ)
   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
   htim2.Init.Period = 9999; //contagem para obter 1 segundo
   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   HAL_TIM_Base_Init(&htim2);
   HAL_NVIC_SetPriority(TIM2_IRQn,0,0);
   HAL_NVIC_EnableIRQ(TIM2_IRQn);
   HAL_TIM_Base_Start_IT(&htim2); /* iniciar temporizador em interrupção */
   }
   //função para atualizar o jogo
   void Game_update(){
    //atualizar posição da cobra
    update_snake_position();
       if(check_colision()){
           //implementar a lógica para a colisão;
       }
       //implementar a lógica das maçãs e placar;
   }
   //verificar colisões
   int check_colision(){
       // verifica colisão com as bordas da tela
       if(snake.body[0].x < 0 || snake.body[0].x >= 240 || snake.body[0].y < 0 || snake.body[0].y >= 240){
           return 1; //colsão true das bordas
       }
       //verificar colisão com o proprio corpo
       for(int i = 1; i < snake.length; i++){
        if(snake.body[0].x == snake.body[i].x && snake.body[0].y == snake.body[i].y){
            return 1; // colisão com o próprio corpo
        }
       }
       return 0; //sem colisão
   }
   void update_snake_position(){
       //atualiza posição da cabeça da cobrinha com base na direção atual
       switch(snake.direction){
        case UP:
        snake.body[0].y--;
       break;
       case DOWN:
       snake.body[0].y++;
       break;
       case LEFT:
       snake.body[0].x--;
       break;
       case RIGHT:
       snake.body[0].x++;
       break;
       }
       //atualiza a posição do corpo da cobrinha movendo cada segmento
       for(int i = snake.length - 1; i > 0; i--){
           snake.body[i] = snake.body[i-1];
           
       }
   } //função para renderizar a cobra  
   void draw_snake(){
    //limpar a tela
    ST7789_FillScreen(ST789_BLACK);
    //desenhando cada segmento da cobra
    for(int i = 0; i < snake.length;; i++){
        ST7789_DrawPixels(snake.body[i].x, snake.body[i].y, ST7789_WHITE);
    } //atualizar tela
    void ST7789_Refresh(){

    }
    }
    void TIM2_IRQHandler(){//função que trata a interrupção para o temporizador
        HAL_TIM_IRQHandler(&htim2); 
    } 
    void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
        if(htim -> Instance == TIM2){
            seconds++;
        }
    }  //função para renderizar o jogo na tela
    void Render_Game(){
       //implementar a lógica para acender os leds de acordo com a posição da cobra e da maçã
       //atualizar a tela com um contador de segundos
      printf("tempo: %d segundos \n", seconds);
      
    }
   int main(void){
       //inicializar hal
       HALL_INIT();
       //inicializar periféricos e configurar jogo
       Game_init();
       //loop de repetição principal
       while(1){
           Game_update();
           draw_snake();//renderizar a cobra na tela
           //implementar lógica para entradas dos botões
           }
           //lógica de atualizar o jogo
   }